<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>servletEdu</display-name>
  <context-param>
  	<!-- ServletContext객체에 변수를 설정하고 할떄 사용하는 태그이다.  -->
	<param-name>contextConfig</param-name>
	<param-value>/WEB-INF/context.xml</param-value>
  </context-param>
  
  <!-- 
  <servlet>
  	<servlet-name>first</servlet-name>
  	<servlet-class>com.servletEdu.test.FirstServlet</servlet-class>
  </servlet>
  <servlet>태그는 HttpServlet을 상속받고 있는 클래스를 web.xml에 등록할 떄 사용한다. 이떄 반드시 하위의 <servlet-name><servlet-class>를 가져야한다. 
  <servlet-name>은 등록하는 서블릿의 이름을 부여하고, 등록 후부터는 등록된 이름으로만 사용하여야한다. 
  <servlet-class>는 등록하는 서블릿의 실제 클래스 이름을 지정한다. 즉 서블릿을 찾아가기 위해 해당 클래스의 경로를 입력해주어야 하는 태그이다. 
  <servlet-mapping>
  	<servlet-name>first</servlet-name>
  	<url-pattern>/hello</url-pattern>
  </servlet-mapping>
  <servlet-mapping>은 web.xml에서 <servlet>으로 등록한 서블릿을 실행 요청할 때 사용할 URI를 지정하기 위해 사용하는 태그이다. 그렇기에 <servlet>태그를 사용했을 때만 사용할 수 있따. 
  <servlet-name>은 실행할 서블릿 이름을 지정하는 태그로, 반드시 <servlet>에서 등록한 서블릿이름으로 지정해야만 한다. 그렇지 않을 경우 오류가 발생하여 서버에 올라가지 않는다. 
  <utl-patter>은 서블릿을 실행할 때 사용할 URL을 지정하는 태그이다. 그래서 경로로 지정한 다음부터는 지정된 경로로 접근하면 서블릿이 실행된다. -->
  
  <!--  servlet-->
  	<!-- servlet-name>addInfo</servlet-name--> <!-- 3 -->
  	<!-- servlet-class>com.servletEdu.test.AdditionalInfoServlet</servlet-class--> <!-- 4 -->
  <!-- /servlet-->
  <!-- servlet-mapping-->
  	<!--servlet-name>addInfo</servlet-name--> <!-- 2 -->
  	<!-- url-pattern>/addInfo</url-pattern-->	<!-- 1 -->
  	<!-- <url-pattern>/addInfo/*</url-pattern> 이렇게도 가능하다. 이렇게 설정하는 경우 'http://localhost:8080/servletEdu/addInfo/'뒤에 어떤 것이 와도 addinfo로 지정된 서블릿을 실행한다.
  	이때 예를 들어 /a를 입력했다고 가정한다면 , 화면에 출력되는 값중 path info는 *에 해당하는 값을 반환하였고 path translated는 *에 해당하는 경로를 물리적인 경로로 변환후 반환한다.  -->
  <!-- /servlet-mapping-->
  <!-- 1에서 url patterm을 지정했으므로 http://localhost:8080/servletEdu/addInfo로 ULR요청이 들어오면 2에 지정된 이름과 같은 이름을 <servlet>태그의 <servlet-name>에서 찾는다.
  3에서 addInfo가 있는것을 찾고, 그런 다음 <servlet-class>에 지정된 서블릿을 실행한다. 즉 4에 지정된 경로의 클래스의 service()메소드가 실행된다.  -->
 
 
  <!-- 
  <servlet>
  	<servlet-name>initParam</servlet-name>
  	<servlet-class>com.servletEdu.test.InitParamServlet</servlet-class>
  	<init-param>
  		<param-name>id</param-name>
  		<param-value>guest</param-value>
  	</init-param>
  	<init-param>
  		<param-name>password</param-name>
  		<param-value>1004</param-value>
  	</init-param>
  	! <init-param>은 서블릿에 변수를 전달할 때 사용하는 태그이다. 값을 지정하고 수정할때 서블릿 소스를 손댈 필요가 없고 태그의 값만 수정하면 된다는 편리함이 있다. >
  	<load-on-startup>1</load-on-startup>
  	! 웹서비스가 시작될때 서블릿 객체를 생성할 수 있도록 해주는 태그이다. 서블릿 객체가 메모리에 생성되는 시점은 클라이언트로 부터 최초의 요청이 있을 때인데, 서버에 서블릿 클래스가 있어도 클라이언트의 요청이 없으면
  	메모리에 객체가 생성되지 않는다. 그런데 서블릿은 요청부터 응답까지 서비스 처리에 전반적으로 관여하기도 한다. 또는 클라이언트로부터 요청이 들어오기전에 어떤기능을 미리 준비하는 서블릿도 있는데, 이런 서블릿은 웹서비스가
  	시작될 때 미리 객체를 생성하여 대기하고 있어야한다. 
  	이럴때 사용하는 태그가 <load-on-startup>이다.  >
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>initParam</servlet-name>
  	<url-pattern>/initParamTest</url-pattern>
  </servlet-mapping>
  -->
  
  
  <servlet>
  	<servlet-name>servletConfigTest</servlet-name>
  	<servlet-class>com.servletEdu.test.ServletConfigTestServlet</servlet-class>
  	<init-param>
  		<param-name>charset</param-name>
  		<param-value>UTF-8</param-value>
  	</init-param>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>servletConfigTest</servlet-name>
  	<url-pattern>/servletConfigTest</url-pattern>
  </servlet-mapping>
</web-app>